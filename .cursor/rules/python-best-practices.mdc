---
description: 
globs: 
alwaysApply: false
---
# Python 编码最佳实践

## 代码风格和格式化

本项目使用 [pyproject.toml](mdc:pyproject.toml) 中定义的 Black 格式化器配置：
- 行长度限制：88 字符
- 目标 Python 版本：3.12+
- 使用 `black` 自动格式化代码

## 类型注解

- 始终为函数参数和返回值添加类型注解
- 使用 `from typing import` 导入必要的类型
- 对于复杂类型，使用 `Union`, `Optional`, `List`, `Dict` 等

```python
from typing import Optional, List, Dict, Any

def process_data(items: List[Dict[str, Any]]) -> Optional[str]:
    """处理数据并返回结果"""
    pass
```

## 异步编程

本项目大量使用异步编程，特别是在 AI 代理和 API 调用中：

```python
import asyncio
from typing import Awaitable

async def agent_call(prompt: str) -> str:
    """异步调用 AI 代理"""
    # 使用 await 调用异步函数
    result = await some_async_function()
    return result
```

## 错误处理

- 使用具体的异常类型而不是通用的 `Exception`
- 为 API 调用添加重试机制
- 记录错误信息以便调试

```python
import logging
from httpx import HTTPError

logger = logging.getLogger(__name__)

try:
    response = await client.get(url)
except HTTPError as e:
    logger.error(f"HTTP 请求失败: {e}")
    raise
```

## 依赖管理

- 使用 [uv.lock](mdc:uv.lock) 锁定依赖版本
- 新增依赖时更新 [pyproject.toml](mdc:pyproject.toml)
- 区分开发依赖和生产依赖

## 测试规范

参考 [pyproject.toml](mdc:pyproject.toml) 中的测试配置：
- 测试文件放在 `tests/` 目录
- 测试文件以 `test_` 开头
- 使用 pytest 和 pytest-cov 进行测试和覆盖率检查

## 文档字符串

使用 Google 风格的文档字符串：

```python
def calculate_influence_index(followers: int, downloads: int, likes: int) -> float:
    """计算影响力指数
    
    Args:
        followers: 关注者数量
        downloads: 下载次数
        likes: 点赞数
        
    Returns:
        计算得出的影响力指数
        
    Raises:
        ValueError: 当输入参数为负数时
    """
    pass
```
