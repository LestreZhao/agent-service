---
description:
globs:
alwaysApply: false
---
# Git 工作流规范

## 分支管理策略

本项目采用 Git Flow 工作流模式，参考 [CONTRIBUTING.md](mdc:CONTRIBUTING.md) 中的贡献指南。

### 主要分支

- `main`: 生产稳定分支，只包含经过测试的稳定代码
- `develop`: 开发主分支，用于集成各种功能
- `feature/*`: 功能分支，从 develop 分出，完成后合并回 develop
- `release/*`: 发布分支，用于发布前的最后准备
- `hotfix/*`: 热修复分支，从 main 分出，修复紧急问题

### 分支命名规范

```bash
# 功能分支
feature/agent-optimization
feature/new-crawler-engine
feature/api-performance-improvement

# 修复分支
fix/memory-leak-in-workflow
fix/authentication-error

# 热修复分支
hotfix/critical-security-patch
hotfix/production-crash-fix

# 发布分支
release/v0.2.0
release/v0.1.1
```

## 提交消息规范

使用约定式提交（Conventional Commits）格式：

```
<类型>[可选的作用域]: <描述>

[可选的正文]

[可选的脚注]
```

### 提交类型

- `feat`: 新功能
- `fix`: 修复 bug
- `docs`: 文档更改
- `style`: 代码格式化（不影响代码运行的变动）
- `refactor`: 代码重构（既不是新增功能，也不是修复 bug）
- `perf`: 性能优化
- `test`: 添加或修改测试
- `chore`: 构建过程或辅助工具的变动
- `ci`: CI/CD 相关变动

### 提交示例

```bash
# 新功能
feat(agents): 添加 DeepSeek 模型支持
feat(api): 实现任务流式进度推送

# 修复
fix(workflow): 修复并发处理时的内存泄漏问题
fix(crawler): 解决 HTTP 超时错误

# 文档
docs: 更新 API 使用文档
docs(readme): 添加性能优化指南

# 重构
refactor(cache): 优化缓存实现，提升性能
refactor: 统一错误处理机制

# 性能
perf(models): 优化模型调用批处理逻辑
perf: 减少不必要的内存分配

# 测试
test(agents): 添加搜索代理单元测试
test: 增加 API 端点集成测试
```

## Pre-commit 配置

项目使用 pre-commit 钩子确保代码质量，配置在 [pre-commit](mdc:pre-commit) 文件中。

### 安装和配置

```bash
# 安装 pre-commit
pip install pre-commit

# 安装钩子
pre-commit install

# 手动运行所有钩子
pre-commit run --all-files
```

### 钩子内容

- **代码格式化**: 使用 Black 自动格式化 Python 代码
- **导入排序**: 使用 isort 整理导入语句
- **代码检查**: 使用 flake8 进行代码风格检查
- **类型检查**: 使用 mypy 进行类型注解检查
- **文件检查**: 检查文件大小、编码、行尾等

## 代码审查流程

### Pull Request 规范

1. **分支要求**: 从 `develop` 创建功能分支
2. **代码要求**: 通过所有 pre-commit 检查
3. **测试要求**: 新功能必须包含测试用例
4. **文档要求**: 更新相关文档和 API 说明

### PR 模板

```markdown
## 变更描述
简要描述本次 PR 的主要变更内容。

## 变更类型
- [ ] 新功能 (feature)
- [ ] 修复 (fix)
- [ ] 文档更新 (docs)
- [ ] 性能优化 (perf)
- [ ] 重构 (refactor)
- [ ] 其他

## 测试
- [ ] 已添加单元测试
- [ ] 已添加集成测试
- [ ] 手动测试通过
- [ ] 所有现有测试通过

## 相关 Issue
Closes #xxx

## 检查清单
- [ ] 代码符合项目编码规范
- [ ] 已更新相关文档
- [ ] PR 标题遵循约定式提交格式
- [ ] 已完成自测
```

## 版本管理

### 语义化版本

采用语义化版本号格式：`MAJOR.MINOR.PATCH`

- `MAJOR`: 不兼容的 API 修改
- `MINOR`: 向下兼容的功能性新增
- `PATCH`: 向下兼容的问题修正

### 发布流程

```bash
# 1. 创建发布分支
git checkout develop
git pull origin develop
git checkout -b release/v0.2.0

# 2. 更新版本号和变更日志
# 编辑 pyproject.toml 中的版本号
# 更新 CHANGELOG.md

# 3. 提交发布准备
git add .
git commit -m "chore(release): 准备 v0.2.0 发布"

# 4. 合并到 main 并打标签
git checkout main
git merge release/v0.2.0
git tag -a v0.2.0 -m "Release v0.2.0"

# 5. 合并回 develop
git checkout develop
git merge release/v0.2.0

# 6. 推送所有变更
git push origin main develop v0.2.0

# 7. 删除发布分支
git branch -d release/v0.2.0
```

## 文件忽略

确保 [.gitignore](mdc:.gitignore) 文件包含以下内容：

```gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
.venv/
venv/
env/

# IDE
.vscode/
.idea/
*.swp
*.swo

# 项目特定
.cache/
*.log
.env
.env.local

# 操作系统
.DS_Store
Thumbs.db

# 临时文件
*.tmp
*.bak
*.swp
*~
```

## 常用 Git 命令

### 日常开发

```bash
# 创建并切换到新功能分支
git checkout -b feature/new-feature develop

# 查看状态和变更
git status
git diff
git diff --staged

# 暂存和提交
git add .
git commit -m "feat: 添加新功能"

# 推送分支
git push -u origin feature/new-feature

# 更新本地分支
git fetch origin
git rebase origin/develop
```

### 分支管理

```bash
# 查看所有分支
git branch -a

# 切换分支
git checkout develop
git checkout main

# 删除本地分支
git branch -d feature/completed-feature

# 删除远程分支
git push origin --delete feature/completed-feature

# 合并分支（无快进）
git merge --no-ff feature/new-feature
```

### 历史管理

```bash
# 查看提交历史
git log --oneline --graph
git log --grep="feat"

# 修改最后一次提交
git commit --amend

# 交互式重定向（整理提交历史）
git rebase -i HEAD~3

# 回退到指定提交
git reset --soft HEAD~1  # 保留变更
git reset --hard HEAD~1  # 丢弃变更
```

## 协作最佳实践

### 提交频率

- 小而频繁的提交胜过大而稀少的提交
- 每个提交应该代表一个逻辑上的变更单元
- 提交前确保代码可以正常运行

### 分支同步

```bash
# 定期同步 develop 分支的最新变更
git checkout feature/my-feature
git fetch origin
git rebase origin/develop

# 解决冲突后继续 rebase
git add .
git rebase --continue
```

### 代码冲突解决

```bash
# 查看冲突文件
git status

# 编辑冲突文件，解决冲突标记
# <<<<<<< HEAD
# 当前分支的代码
# =======
# 其他分支的代码
# >>>>>>> other-branch

# 标记冲突已解决
git add conflicted-file.py

# 完成合并
git commit
```
