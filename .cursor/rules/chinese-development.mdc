---
description:
globs:
alwaysApply: false
---
# 中文开发环境配置指南

## 🌏 中文本地化开发规范

### 语言和编码配置

#### 字符编码标准
- **项目编码**: 统一使用 UTF-8 编码
- **文件保存**: 确保所有 Python 文件以 UTF-8 格式保存
- **数据库编码**: 使用 `utf8mb4` 字符集处理中文内容
- **API响应**: Content-Type 设置为 `application/json; charset=utf-8`

#### Python 中文处理
```python
# 文件头部声明编码
# -*- coding: utf-8 -*-

# 中文字符串处理
import sys
sys.stdout.reconfigure(encoding='utf-8')

# 中文日志配置
import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
```

### 🔧 开发环境中文配置

#### IDE 和编辑器设置
- **Cursor**: 确保编辑器字符编码设置为 UTF-8
- **终端配置**: 设置环境变量 `LANG=zh_CN.UTF-8`
- **Git 配置**: 支持中文文件名和提交信息
```bash
git config --global core.quotepath false
git config --global gui.encoding utf-8
git config --global i18n.commit.encoding utf-8
git config --global i18n.logoutputencoding utf-8
```

#### 中文输入法兼容性
- **macOS**: 确保在代码编辑时正确切换中英文输入法
- **快捷键**: 设置合适的输入法切换快捷键避免冲突
- **代码注释**: 中文注释使用规范的标点符号

### 🤖 AI 模型中文配置

#### LLM 中文优化
- **模型选择**: 优先选择对中文支持良好的模型
  - OpenAI GPT-4: 中文理解和生成能力强
  - DeepSeek: 专为中文优化的模型
  - Claude: 支持中文对话和代码生成
- **提示词工程**: 使用中文提示词时的最佳实践
- **响应格式**: 确保 AI 响应采用规范的中文表达

#### 中文提示词模板
```python
# 中文任务描述模板
CHINESE_TASK_TEMPLATE = """
任务描述: {task_description}
要求:
1. 使用标准中文回答
2. 代码注释使用中文
3. 变量命名使用英文，注释说明使用中文
4. 错误信息提供中英文对照

请按照以上要求完成任务。
"""

# 中文代码审查模板
CODE_REVIEW_TEMPLATE = """
请对以下代码进行中文审查:
1. 代码逻辑是否正确
2. 中文注释是否清晰
3. 变量命名是否规范
4. 是否符合项目编码规范

代码内容:
{code_content}
"""
```

### 📝 中文文档和注释规范

#### 代码注释标准
```python
class FusionAIAgent:
    """
    FusionAI 智能体基类
    
    该类提供智能体的基础功能，包括任务执行、状态管理和结果输出。
    所有具体的智能体类都应该继承此基类。
    
    Attributes:
        name (str): 智能体名称
        llm (LLM): 语言模型实例
        tools (List[Tool]): 可用工具列表
    """
    
    def __init__(self, name: str, llm=None):
        """
        初始化智能体
        
        Args:
            name (str): 智能体名称，用于标识和日志记录
            llm: 语言模型实例，如果为空则使用默认配置
        """
        self.name = name  # 智能体名称
        self.llm = llm or self._get_default_llm()  # 语言模型
        self.tools = []  # 工具列表
    
    def execute_task(self, task_description: str) -> dict:
        """
        执行指定任务
        
        Args:
            task_description (str): 任务描述，应该使用清晰的中文表达
            
        Returns:
            dict: 执行结果，包含状态码、结果数据和错误信息
            
        Raises:
            TaskExecutionError: 当任务执行失败时抛出
        """
        # 任务执行逻辑
        pass
```

#### 文档编写规范
- **README 文件**: 提供中英文双语版本
- **API 文档**: 接口描述使用中文，参数说明清晰
- **用户指南**: 面向中文用户的详细使用说明
- **错误信息**: 提供中文错误提示和解决方案

### 🌐 API 中文化配置

#### FastAPI 中文响应
```python
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import json

app = FastAPI(
    title="FusionAI API",
    description="FusionAI 智能自动化框架 API 接口",
    version="1.0.0"
)

# 中文错误响应处理
@app.exception_handler(HTTPException)
async def chinese_exception_handler(request, exc):
    """中文化错误响应"""
    error_messages = {
        400: "请求参数错误",
        401: "未授权访问",
        403: "权限不足",
        404: "资源未找到",
        500: "服务器内部错误"
    }
    
    chinese_message = error_messages.get(exc.status_code, "未知错误")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": chinese_message,
            "detail": exc.detail,
            "status_code": exc.status_code
        }
    )

# API 响应格式化
class ChineseResponse:
    """中文 API 响应格式化器"""
    
    @staticmethod
    def success(data=None, message="操作成功"):
        """成功响应"""
        return {
            "success": True,
            "message": message,
            "data": data,
            "timestamp": datetime.now().isoformat()
        }
    
    @staticmethod
    def error(message="操作失败", error_code=None):
        """错误响应"""
        return {
            "success": False,
            "message": message,
            "error_code": error_code,
            "timestamp": datetime.now().isoformat()
        }
```

### 📊 中文数据处理

#### 中文文本处理
```python
import jieba  # 中文分词
import re
from typing import List, Dict

class ChineseTextProcessor:
    """中文文本处理工具类"""
    
    def __init__(self):
        # 加载自定义词典
        jieba.load_userdict("custom_dict.txt")
    
    def clean_chinese_text(self, text: str) -> str:
        """
        清理中文文本
        
        Args:
            text (str): 原始中文文本
            
        Returns:
            str: 清理后的文本
        """
        # 移除多余空白字符
        text = re.sub(r'\s+', ' ', text.strip())
        
        # 规范化中文标点符号
        punctuation_map = {
            '，': '，',
            '。': '。',
            '！': '！',
            '？': '？',
            '：': '：',
            '；': '；'
        }
        
        for old, new in punctuation_map.items():
            text = text.replace(old, new)
        
        return text
    
    def segment_chinese(self, text: str) -> List[str]:
        """中文分词"""
        return list(jieba.cut(text))
    
    def extract_keywords(self, text: str, topK: int = 10) -> List[str]:
        """提取中文关键词"""
        import jieba.analyse
        return jieba.analyse.extract_tags(text, topK=topK)
```

#### 中文数据验证
```python
import re
from typing import Optional

class ChineseDataValidator:
    """中文数据验证器"""
    
    @staticmethod
    def is_valid_chinese_name(name: str) -> bool:
        """验证中文姓名格式"""
        pattern = r'^[\u4e00-\u9fa5]{2,8}$'
        return bool(re.match(pattern, name))
    
    @staticmethod
    def is_valid_chinese_phone(phone: str) -> bool:
        """验证中国手机号格式"""
        pattern = r'^1[3-9]\d{9}$'
        return bool(re.match(pattern, phone))
    
    @staticmethod
    def contains_chinese(text: str) -> bool:
        """检查文本是否包含中文字符"""
        pattern = r'[\u4e00-\u9fa5]'
        return bool(re.search(pattern, text))
```

### 🔍 中文搜索和检索

#### 中文搜索优化
```python
class ChineseSearchEngine:
    """中文搜索引擎优化"""
    
    def __init__(self):
        self.stop_words = self._load_chinese_stopwords()
    
    def _load_chinese_stopwords(self) -> set:
        """加载中文停用词"""
        # 常用中文停用词
        return {
            '的', '了', '在', '是', '我', '有', '和', '就', 
            '不', '人', '都', '一', '一个', '上', '也', '很',
            '到', '说', '要', '去', '你', '会', '着', '没有',
            '看', '好', '自己', '这'
        }
    
    def process_chinese_query(self, query: str) -> List[str]:
        """
        处理中文搜索查询
        
        Args:
            query (str): 原始查询字符串
            
        Returns:
            List[str]: 处理后的关键词列表
        """
        # 分词
        words = list(jieba.cut(query))
        
        # 过滤停用词和标点符号
        filtered_words = [
            word.strip() for word in words 
            if word.strip() and word not in self.stop_words
            and not re.match(r'^[^\u4e00-\u9fa5\w]+$', word)
        ]
        
        return filtered_words
```

### 🚀 部署和运维中文化

#### 中文日志配置
```python
import logging
from datetime import datetime

# 中文日志格式配置
class ChineseLogFormatter(logging.Formatter):
    """中文日志格式化器"""
    
    def format(self, record):
        # 中文日志级别映射
        level_mapping = {
            'DEBUG': '调试',
            'INFO': '信息',
            'WARNING': '警告',
            'ERROR': '错误',
            'CRITICAL': '严重错误'
        }
        
        record.chinese_levelname = level_mapping.get(
            record.levelname, record.levelname
        )
        
        # 格式化时间为中文
        record.chinese_time = datetime.fromtimestamp(
            record.created
        ).strftime('%Y年%m月%d日 %H:%M:%S')
        
        return super().format(record)

# 配置中文日志
def setup_chinese_logging():
    """设置中文日志系统"""
    formatter = ChineseLogFormatter(
        '%(chinese_time)s [%(chinese_levelname)s] %(name)s: %(message)s'
    )
    
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    
    logger = logging.getLogger('fusionai')
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)
    
    return logger
```

### 📱 用户界面中文化

#### 前端中文配置
```javascript
// 中文界面配置
const CHINESE_UI_CONFIG = {
    messages: {
        loading: '加载中...',
        success: '操作成功',
        error: '操作失败',
        confirm: '确认',
        cancel: '取消',
        save: '保存',
        delete: '删除',
        edit: '编辑',
        add: '添加',
        search: '搜索',
        reset: '重置'
    },
    
    placeholders: {
        search: '请输入搜索关键词',
        name: '请输入姓名',
        email: '请输入邮箱地址',
        phone: '请输入手机号码'
    },
    
    validation: {
        required: '此字段为必填项',
        email: '请输入有效的邮箱地址',
        phone: '请输入有效的手机号码',
        minLength: '最少需要 {min} 个字符',
        maxLength: '最多允许 {max} 个字符'
    }
};
```

## 💡 开发建议

### 中文开发最佳实践
1. **编码一致性**: 项目内所有文件统一使用 UTF-8 编码
2. **注释规范**: 代码注释使用清晰的中文，避免中英文混杂
3. **变量命名**: 变量使用英文，但配备中文注释说明
4. **错误处理**: 提供中文错误信息和解决建议
5. **文档维护**: 保持中英文文档同步更新
6. **用户体验**: 面向中文用户优化界面和交互

### 常见问题解决
- **乱码问题**: 检查文件编码、数据库字符集、HTTP响应头
- **输入法冲突**: 配置IDE快捷键避免与输入法切换冲突
- **字体显示**: 确保开发环境支持中文字体渲染
- **搜索性能**: 使用专门的中文搜索引擎或分词工具

---

> **注意**: 在开发过程中始终考虑中文用户的使用习惯和需求，确保产品的本地化质量。
