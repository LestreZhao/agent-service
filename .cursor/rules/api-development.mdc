---
description: 
globs: 
alwaysApply: false
---
# FastAPI 应用开发规范

## API 服务架构

FusionAI 的 API 层基于 FastAPI 框架构建，提供高性能的异步 Web 服务。

### 主要组件
- **API 路由**: 定义 RESTful 端点和 WebSocket 连接
- **中间件**: 处理跨域、日志记录、错误处理等
- **流式响应**: 支持实时数据流和服务器发送事件(SSE)
- **智能体集成**: 与 LangGraph 工作流无缝集成

## 核心文件

### API 应用入口
- [src/api/app.py](mdc:src/api/app.py) - FastAPI 应用定义和配置
- [server.py](mdc:server.py) - 服务器启动脚本

### 路由定义
- [src/api/routers/](mdc:src/api/routers/) - API 路由模块
- [src/api/middleware/](mdc:src/api/middleware/) - 中间件定义

## 流式聊天接口

### `/api/chat/stream` 端点

这是核心聊天接口，支持与智能体的实时对话：

```python
@app.post("/api/chat/stream")
async def chat_stream(request: ChatRequest):
    """
    流式聊天接口
    - 接收用户消息
    - 调用 LangGraph 工作流
    - 返回 SSE 流式响应
    """
    pass
```

### 请求格式
```json
{
  "messages": [
    {"role": "user", "content": "用户查询内容"}
  ],
  "debug": false
}
```

### 响应格式
使用 Server-Sent Events (SSE) 流式传输：

```
data: {"type": "agent_start", "agent": "supervisor", "timestamp": "..."}

data: {"type": "agent_message", "agent": "researcher", "content": "搜索结果..."}

data: {"type": "agent_finish", "agent": "reporter", "final_answer": "最终答案"}

data: {"type": "workflow_complete"}
```

## 中间件配置

### CORS 中间件
```python
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 生产环境应限制特定域名
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

### 日志中间件
- 记录请求/响应信息
- 监控 API 性能指标
- 错误追踪和调试

### 安全中间件
- 请求限流
- 身份验证（如需要）
- 输入验证和清理

## 错误处理

### 全局异常处理器
```python
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    return JSONResponse(
        status_code=500,
        content={"error": "内部服务器错误", "detail": str(exc)}
    )
```

### 常见错误类型
- **400 Bad Request**: 请求格式错误
- **422 Unprocessable Entity**: 数据验证失败
- **500 Internal Server Error**: 服务器内部错误
- **503 Service Unavailable**: 外部 API 不可用

## 性能优化

### 异步处理
```python
async def process_workflow(messages: List[Message]) -> AsyncGenerator:
    """异步处理工作流，支持流式输出"""
    async for chunk in workflow_executor(messages):
        yield chunk
```

### 连接池管理
- HTTP 客户端连接池
- 数据库连接池
- Redis 连接池

### 缓存策略
- 响应缓存
- 查询结果缓存
- 静态资源缓存

## WebSocket 支持

### WebSocket 端点
```python
@app.websocket("/ws/chat")
async def websocket_chat(websocket: WebSocket):
    """WebSocket 聊天接口"""
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            # 处理消息并发送响应
            await websocket.send_text(response)
    except WebSocketDisconnect:
        pass
```

### 连接管理
- 连接状态追踪
- 消息队列管理
- 断线重连处理

## 监控和健康检查

### 健康检查端点
```python
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }
```

### 指标收集
- API 调用次数
- 响应时间分布
- 错误率统计
- 并发连接数

## API 文档

### 自动文档生成
- Swagger UI: `/docs`
- ReDoc: `/redoc`
- OpenAPI 规范: `/openapi.json`

### 文档配置
```python
app = FastAPI(
    title="FusionAI API",
    description="智能体工作流 API 服务",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)
```

## 部署和配置

### 环境配置
- 开发环境: 调试模式，详细日志
- 测试环境: 集成测试，性能测试
- 生产环境: 优化配置，监控告警

### 启动配置
```python
if __name__ == "__main__":
    uvicorn.run(
        "src.api.app:app",
        host="0.0.0.0",
        port=8000,
        reload=True,  # 仅开发环境
        workers=4     # 生产环境多进程
    )
```

### Docker 部署
```dockerfile
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["uvicorn", "src.api.app:app", "--host", "0.0.0.0", "--port", "8000"]
```

## 开发最佳实践

### API 设计原则
1. **RESTful 设计**: 遵循 REST 架构风格
2. **版本控制**: API 版本化管理
3. **文档优先**: 先设计 API 文档
4. **测试驱动**: 编写全面的 API 测试

### 代码组织
```
src/api/
├── app.py              # FastAPI 应用主文件
├── routers/            # 路由模块
│   ├── chat.py         # 聊天相关路由
│   └── health.py       # 健康检查路由
├── middleware/         # 中间件
│   ├── cors.py         # CORS 处理
│   └── logging.py      # 日志中间件
├── models/             # Pydantic 模型
│   └── chat.py         # 聊天请求/响应模型
└── dependencies/       # 依赖注入
    └── auth.py         # 认证依赖
```

### 安全考虑
- 输入验证和清理
- SQL 注入防护
- XSS 攻击防护
- 速率限制
- 身份验证和授权
