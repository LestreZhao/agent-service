---
description:
globs:
alwaysApply: false
---
# 工作流系统

## 核心工作流

主要工作流逻辑在 [src/workflow.py](mdc:src/workflow.py) 中定义。

## 图结构系统

### 图构建
工作流图通过 [src/graph/builder.py](mdc:src/graph/builder.py) 构建，定义了智能体间的协作流程。

### 节点类型
[src/graph/nodes.py](mdc:src/graph/nodes.py) 定义了各种节点类型：
- 智能体节点
- 决策节点
- 条件节点
- 协调节点

### 状态管理
[src/graph/types.py](mdc:src/graph/types.py) 定义了状态类型和数据结构。

## 执行流程

### 基本流程
1. **输入处理**: 用户查询经过预处理
2. **任务规划**: 规划员分析任务并制定执行计划
3. **智能体协作**: 各专业智能体按计划执行任务
4. **监督协调**: 监督员和协调员确保任务正确执行
5. **结果整合**: 报告员生成最终综合报告

### 执行模式
- `deep_thinking_mode`: 启用深度思考模式
- `search_before_planning`: 规划前进行搜索

## 服务层

### 工作流服务
[src/service/workflow_service.py](mdc:src/service/workflow_service.py) 提供工作流相关的服务功能。

## 爬虫系统

### 文章爬取
[src/crawler/article.py](mdc:src/crawler/article.py) - 文章内容爬取

### 通用爬虫
[src/crawler/crawler.py](mdc:src/crawler/crawler.py) - 通用爬虫实现

### FireCrawl 集成
[src/crawler/firecrawl_client.py](mdc:src/crawler/firecrawl_client.py) - FireCrawl API 客户端

### 可读性提取
[src/crawler/readability_extractor.py](mdc:src/crawler/readability_extractor.py) - 网页可读性内容提取

## 状态持久化

### 执行记录
工作流执行记录保存在 `docs/executions/` 目录，每次执行都有唯一的时间戳标识。

## 调试和监控

### 调试模式
在 [main.py](mdc:main.py) 中设置 `debug=True` 启用详细日志。

### 执行跟踪
每次工作流执行都会生成详细的执行记录，包括：
- 智能体间的消息传递
- 工具调用和结果
- 决策过程
- 最终输出

## 扩展开发

### 添加新智能体
1. 在 `src/prompts/` 创建提示词文件
2. 在 `src/config/agents.py` 添加智能体配置
3. 在图构建器中添加相应节点
4. 更新工作流逻辑

### 添加新工具
1. 在 `src/tools/` 创建工具文件
2. 使用标准装饰器
3. 在智能体配置中添加工具
4. 测试工具功能
