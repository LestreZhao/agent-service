---
description:
globs:
alwaysApply: false
---
# FusionAI 项目综合概览

## 🎯 项目核心定位
FusionAI 是一个社区驱动的 AI 自动化框架，专注于将 LLM 能力与实用工具深度集成。

### 技术特色
- **多模态 AI 代理**: 支持文本、网页、文档等多种数据源处理
- **工具链深度集成**: 浏览器自动化、网页爬虫、数据库操作、Python执行
- **灵活的工作流编排**: 基于 LangGraph 的可视化工作流设计
- **企业级 API 服务**: FastAPI 构建的高性能 Web 服务

## 🏗️ 核心架构图景

### 数据流向
```
用户请求 → API网关 → 智能体调度 → 工具执行 → 结果处理 → 响应返回
```

### 模块依赖关系
- **API层** ([src/api/](mdc:src/api/)): 对外接口，处理HTTP请求
- **代理层** ([src/agents/](mdc:src/agents/)): 智能决策和任务编排
- **工具层** ([src/tools/](mdc:src/tools/)): 具体功能实现
- **服务层** ([src/service/](mdc:src/service/)): 业务逻辑处理
- **配置层** ([src/config/](mdc:src/config/)): 统一配置管理

## 🛠️ 开发者快速上手

### 首次开发准备
1. **环境配置**: 确保 Python 3.12+，推荐使用 `uv` 作为包管理器
2. **依赖安装**: `uv sync` 或 `pip install -e .`
3. **环境变量**: 配置 OpenAI、DeepSeek 等 API 密钥
4. **启动服务**: `python server.py` 启动开发服务器

### 开发工作流
1. **功能开发**: 遵循模块化设计原则
2. **代码规范**: 使用 `black` 格式化，遵循 PEP 8
3. **测试验证**: 编写单元测试，确保代码质量
4. **API测试**: 使用 FastAPI 自动生成的文档进行测试

## 📚 核心概念理解

### 智能体设计模式
- **单一职责**: 每个代理专注特定领域
- **工具组合**: 通过工具链实现复杂功能
- **状态管理**: 基于 LangGraph 的状态流转
- **错误恢复**: 内置重试和容错机制

### 工具集成策略
- **装饰器增强**: 使用装饰器模式增加功能
- **异步优先**: 优先使用异步处理提升性能
- **配置外置**: 所有配置参数可外部控制
- **监控埋点**: 内置性能监控和日志记录

## 🔍 关键文件索引

### 入口文件
- [main.py](mdc:main.py): 命令行入口
- [server.py](mdc:server.py): Web服务入口
- [src/api/app.py](mdc:src/api/app.py): FastAPI应用配置

### 配置文件
- [pyproject.toml](mdc:pyproject.toml): 项目配置和依赖
- [src/config/](mdc:src/config/): 运行时配置管理

### 核心模块
- [src/workflow.py](mdc:src/workflow.py): 主工作流定义
- [src/agents/agents.py](mdc:src/agents/agents.py): 核心代理实现
- [src/tools/](mdc:src/tools/): 工具库集合

## 🎨 代码风格指南

### 命名约定
- **文件名**: `snake_case.py`
- **类名**: `PascalCase`
- **函数/变量**: `snake_case`
- **常量**: `UPPER_SNAKE_CASE`
- **私有成员**: `_leading_underscore`

### 文档规范
- **模块级**: 描述模块功能和用途
- **类级**: 说明类的职责和使用方法
- **函数级**: 描述参数、返回值和副作用
- **复杂逻辑**: 添加行内注释说明算法思路

## 🚀 性能优化建议

### 代码层面
- **异步处理**: 所有 I/O 操作使用异步
- **连接复用**: 数据库和HTTP连接复用
- **缓存策略**: 合理使用内存和Redis缓存
- **批量处理**: 优化批量数据处理逻辑

### 架构层面
- **微服务**: 考虑按功能拆分微服务
- **负载均衡**: 支持水平扩展
- **监控告警**: 完善的性能监控体系
- **资源管理**: 合理的资源分配和回收

## 📋 常见开发任务

### 添加新工具
1. 在 `src/tools/` 创建工具文件
2. 实现标准工具接口
3. 添加装饰器增强功能
4. 编写单元测试
5. 更新工具注册

### 创建新代理
1. 在 `src/agents/` 创建代理文件
2. 继承基础代理类
3. 定义代理能力和工具组合
4. 配置 LangGraph 工作流
5. 集成到API路由

### API端点开发
1. 在 `src/api/` 添加路由文件
2. 定义请求/响应模型
3. 实现业务逻辑
4. 添加中间件和验证
5. 编写API文档

## 🔗 相关规则文件
- [fusionai-overview.mdc](mdc:.cursor/rules/fusionai-overview.mdc): 详细技术架构
- [development-guidelines.mdc](mdc:.cursor/rules/development-guidelines.mdc): 开发规范
- [api-development.mdc](mdc:.cursor/rules/api-development.mdc): API开发指南
- [tools-integration.mdc](mdc:.cursor/rules/tools-integration.mdc): 工具集成规范
